basePath: /
definitions:
  delivery.jsonResponse:
    properties:
      data: {}
      error:
        type: boolean
      message:
        type: string
    type: object
  types.CreateCategoryReq:
    properties:
      title:
        example: Work
        type: string
    type: object
  types.CreateTodoReq:
    properties:
      accountId:
        type: integer
      categoryId:
        example: 2
        type: integer
      description:
        example: solve all problems in chapter 2
        type: string
      title:
        example: do homeWork
        type: string
    type: object
  types.LoginReq:
    properties:
      email:
        example: example@gmai.com
        type: string
      password:
        example: "111222333444"
        type: string
    type: object
  types.PairToken:
    properties:
      accessToken:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE1OTY5Nzc2MjEsImZuYW1lIjoiU2hhbiIsImxuYW1lIjoiVml2IiwidXNlciI6ImFzZEB0ZXN0LmNvbSJ9.tdhUL-KpDmzSNtV9z6XhUgoTKcVabuOPS3fHAySjSXQ
        type: string
      refreshToken:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE1OTY5Nzc2MjEsImZuYW1lIjoiU2hhbiIsImxuYW1lIjoiVml2IiwidXNlciI6ImFzZEB0ZXN0LmNvbSJ9.tdhUL-KpDmzSNtV9z6XhUgoTKcVabuOPS3fHAySjSXQ
        type: string
    type: object
  types.RegisterReq:
    properties:
      email:
        example: example@gmai.com
        type: string
      password:
        example: "111222333444"
        type: string
      userName:
        example: example5040
        type: string
    type: object
  types.UpdateDueDate:
    properties:
      due_date:
        example: "2022-09-12 12:50:05"
        type: string
    type: object
  types.UpdatePriority:
    properties:
      priority:
        example: 5
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  title: Todo API documentation
  version: 0.0.1
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: login User with "email" and "password" to get token for authentication
        user to use other endpoints
      parameters:
      - description: ' '
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/types.LoginReq'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PairToken'
        "400":
          description: error
          schema:
            $ref: '#/definitions/delivery.jsonResponse'
        "500":
          description: error
          schema:
            $ref: '#/definitions/delivery.jsonResponse'
      summary: LOGIN USER
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: register User for use api
      parameters:
      - description: ' '
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/types.RegisterReq'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PairToken'
        "400":
          description: error
          schema:
            $ref: '#/definitions/delivery.jsonResponse'
        "500":
          description: error
          schema:
            $ref: '#/definitions/delivery.jsonResponse'
      summary: REGISTER USER
      tags:
      - Auth
  /category/{id}:
    delete:
      consumes:
      - application/json
      description: delete category based on category Id. (auth required)
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/delivery.jsonResponse'
        "400":
          description: error
          schema:
            $ref: '#/definitions/delivery.jsonResponse'
        "500":
          description: error
          schema:
            $ref: '#/definitions/delivery.jsonResponse'
      security:
      - apiKey: []
      summary: DELETE CATEGORY
      tags:
      - Category
  /category/create:
    post:
      consumes:
      - application/json
      description: create category based on params. (auth required)
      parameters:
      - description: ' '
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/types.CreateCategoryReq'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/delivery.jsonResponse'
        "400":
          description: error
          schema:
            $ref: '#/definitions/delivery.jsonResponse'
        "500":
          description: error
          schema:
            $ref: '#/definitions/delivery.jsonResponse'
      security:
      - apiKey: []
      summary: CREATE CATEGORY
      tags:
      - Category
  /category/getall:
    get:
      consumes:
      - application/json
      description: get all category. (auth required)
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/delivery.jsonResponse'
        "400":
          description: error
          schema:
            $ref: '#/definitions/delivery.jsonResponse'
        "500":
          description: error
          schema:
            $ref: '#/definitions/delivery.jsonResponse'
      security:
      - apiKey: []
      summary: GETALL CATEGORY
      tags:
      - Category
  /todo/create:
    post:
      consumes:
      - application/json
      description: create todo based on params. (auth required)
      parameters:
      - description: ' '
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/types.CreateTodoReq'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/delivery.jsonResponse'
        "400":
          description: error
          schema:
            $ref: '#/definitions/delivery.jsonResponse'
        "500":
          description: error
          schema:
            $ref: '#/definitions/delivery.jsonResponse'
      security:
      - apiKey: []
      summary: CREATE TODO
      tags:
      - Todo
  /todo/due_date/{id}:
    put:
      consumes:
      - application/json
      description: update todo due_date based on todo Id and due_date. (auth required)
      parameters:
      - description: ' '
        in: body
        name: dueDate
        required: true
        schema:
          $ref: '#/definitions/types.UpdateDueDate'
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/delivery.jsonResponse'
        "400":
          description: error
          schema:
            $ref: '#/definitions/delivery.jsonResponse'
        "500":
          description: error
          schema:
            $ref: '#/definitions/delivery.jsonResponse'
      security:
      - apiKey: []
      summary: UPDATE TODO DUE_DATE
      tags:
      - Todo
  /todo/getall:
    get:
      consumes:
      - application/json
      description: get all todo based on offset for pagination. (auth required)
      parameters:
      - description: minimum number for offset is '0', defualt limit is '5'
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/delivery.jsonResponse'
        "400":
          description: error
          schema:
            $ref: '#/definitions/delivery.jsonResponse'
        "500":
          description: error
          schema:
            $ref: '#/definitions/delivery.jsonResponse'
      security:
      - apiKey: []
      summary: GETALL TODO
      tags:
      - Todo
  /todo/priority/{id}:
    put:
      consumes:
      - application/json
      description: update todo priority based on todo Id and priority. (auth required)
      parameters:
      - description: ' '
        in: body
        name: priority
        required: true
        schema:
          $ref: '#/definitions/types.UpdatePriority'
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/delivery.jsonResponse'
        "400":
          description: error
          schema:
            $ref: '#/definitions/delivery.jsonResponse'
        "500":
          description: error
          schema:
            $ref: '#/definitions/delivery.jsonResponse'
      security:
      - apiKey: []
      summary: UPDATE TODO PRIORITY
      tags:
      - Todo
  /todo/status/{id}:
    put:
      consumes:
      - application/json
      description: update todo Status based on todo Id. (auth required)
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/delivery.jsonResponse'
        "400":
          description: error
          schema:
            $ref: '#/definitions/delivery.jsonResponse'
        "500":
          description: error
          schema:
            $ref: '#/definitions/delivery.jsonResponse'
      security:
      - apiKey: []
      summary: UPDATE TODO STATUS
      tags:
      - Todo
securityDefinitions:
  apiKey:
    in: header
    name: Token
    type: apiKey
swagger: "2.0"
